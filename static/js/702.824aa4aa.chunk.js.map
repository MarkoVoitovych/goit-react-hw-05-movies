{"version":3,"file":"static/js/702.824aa4aa.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Pagination/Pagination.styled.js","components/Pagination/Pagination.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","utils/themoviedbAPI.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-left: 15px;\n  margin-bottom: 15px;\n`;\n\nexport const Item = styled.li``;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import { GiFilmProjector } from 'react-icons/gi';\n\nimport { Item, List, StyledLink } from './MoviesList.styled';\n\nfunction MoviesList({ movies, location }) {\n  return (\n    <List>\n      {movies.map(movie => {\n        return (\n          <Item key={movie.id}>\n            <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              <GiFilmProjector size={12} /> {movie.title}\n            </StyledLink>\n          </Item>\n        );\n      })}\n    </List>\n  );\n}\n\nexport default MoviesList;\n","import styled from 'styled-components';\nimport ReactPaginate from 'react-paginate';\n\nexport const StyledPaginate = styled(ReactPaginate)`\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  margin: 10px 0;\n  font-size: 18px;\n  .selected {\n    color: red;\n  }\n  a {\n    padding: 10px 0;\n    cursor: pointer;\n    &:hover {\n      color: blue;\n    }\n  }\n`;\n","// import ReactPaginate from 'react-paginate';\nimport { StyledPaginate } from './Pagination.styled';\n\nfunction Paginator({ totalItems, itemsPerPage, setSearchParams, params }) {\n  const pageCount = Math.ceil(totalItems / itemsPerPage);\n\n  const handlePageClick = event => {\n    setSearchParams({ ...params, page: event.selected + 1 });\n  };\n\n  return (\n    <>\n      <StyledPaginate\n        breakLabel=\"...\"\n        nextLabel=\">\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={4}\n        marginPagesDisplayed={2}\n        pageCount={pageCount}\n        previousLabel=\"<\"\n        renderOnZeroPageCount={null}\n      />\n    </>\n  );\n}\n\nexport default Paginator;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin: 15px 0;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  margin-left: 1px;\n  cursor: pointer;\n`;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'utils/themoviedbAPI';\nimport MoviesList from 'components/MoviesList';\nimport Paginator from 'components/Pagination';\nimport { Button, Form, Input } from './Movies.styled';\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams({\n    query: '',\n    page: 1,\n  });\n  const params = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n  const { query } = params;\n  const page = Number(params.page);\n\n  useEffect(() => {\n    if (!query) return;\n    (async () => {\n      try {\n        const data = await getMoviesByQuery(query, page);\n        setMovies(data);\n      } catch (error) {\n        alert(error.message);\n      }\n    })();\n  }, [query, page]);\n\n  const handleQuerySubmit = e => {\n    e.preventDefault();\n    const searchQuery = e.target.elements.query.value.trim();\n    if (searchQuery === '') {\n      e.target.reset();\n      return;\n    }\n    setSearchParams({ query: searchQuery, page: 1 });\n    e.target.reset();\n  };\n  return (\n    <>\n      <Form onSubmit={handleQuerySubmit}>\n        <Input type=\"text\" name=\"query\" autoFocus />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n      {movies?.results && (\n        <>\n          <MoviesList movies={movies.results} location={location} />\n          <Paginator\n            itemsPerPage={20}\n            totalItems={movies.total_results}\n            setSearchParams={setSearchParams}\n            params={params}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '663bd5fd8d905b7ce2d57e9867d3492e',\n};\n\nexport const getPopularMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get('/trending/movie/day', {\n      params: {\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMoviesByQuery = async (query, page = 1) => {\n  try {\n    const { data } = await axios.get('/search/movie', {\n      params: {\n        query,\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/credits`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/reviews`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["List","styled","Item","StyledLink","Link","movies","location","map","movie","to","id","state","from","size","title","StyledPaginate","ReactPaginate","totalItems","itemsPerPage","setSearchParams","params","pageCount","Math","ceil","breakLabel","nextLabel","onPageChange","event","page","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","renderOnZeroPageCount","Form","Input","Button","useState","setMovies","useLocation","useSearchParams","query","searchParams","useMemo","Object","fromEntries","Number","useEffect","getMoviesByQuery","data","alert","message","onSubmit","e","preventDefault","searchQuery","target","elements","value","trim","reset","type","name","autoFocus","results","MoviesList","total_results","axios","api_key","getPopularMovies","getMovieById","movieId","getMovieCredits","getMovieReviews"],"sourceRoot":""}